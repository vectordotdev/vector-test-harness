#!/bin/bash
set -euo pipefail

# Init lib.
# shellcheck source=SCRIPTDIR/../lib/vector-test-harness/init.sh
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)/../lib/vector-test-harness/init.sh"

#
# Usage
#

register_usage <<END
USAGE
   test -t test [-c configuration] [-s subjects] [-u user-id] [{-b|-r}]

DESCRIPTION
   Runs and profiles the provided case, uploading the results to S3.

OPTIONS
   -b, --bootstrap-only  Bootstrap the test only, do not test any subjects
   -r, --run-only        Don't run the bootstrap task, just run the test. This is helpful for repeated runs.
       --skip-terraform  Skip all terraform commands. This is helpful for repeated runs.
   -c, --configuration   The test configuration (default: default, env: VECTOR_TEST_CONFIGURATION)
   -s, --subject         The test subject (ex: vector, env: VECTOR_TEST_SUBJECT)
   -t, --test            The test to run (ex: tcp_to_blackhole, env: VECTOR_TEST_NAME)
   -u, --user-id         Your user ID (ex: ben, env: VECTOR_TEST_USER_ID)

EXAMPLE
   test -t tcp_to_blackhole -s vector
END

#
# Dependencies
#

ensure_commad_available "ansible-playbook" "sudo pip install ansible"
ensure_commad_available "terraform" "brew install terraform"
ensure_commad_available "aws" "pip install awscli"
ensure_echanced_getopt_available

#
# Variables
#

# Step toggling
BOOTSTRAP='true'
RUN='true'
SKIP_TERRAFORM='false'

# Required from the environment.
TEST_SSH_PUBLIC_KEY="${VECTOR_TEST_SSH_PUBLIC_KEY:-""}"
TEST_SUBJECTS="${VECTOR_TEST_SUBJECTS:-""}"
TEST_TIMESTAMP="${VECTOR_TEST_TIMESTAMP:-"$(date -u +%s)"}"
TEST_CUSTOM_VECTOR_DEB_PATH="${VECTOR_TEST_CUSTOM_VECTOR_DEB_PATH:-""}"

# Configurable via cli flags
TEST_CONFIGURATION="${VECTOR_TEST_CONFIGURATION:-"default"}"
TEST_NAME="${VECTOR_TEST_NAME:-""}"
TEST_SUBJECT="${VECTOR_TEST_SUBJECT:-""}"
TEST_USER_ID="${VECTOR_TEST_USER_ID:-""}"

#
# Flags
#

OPTIONS="bc:rs:t:u:"
LONGOPTS="bootstrap-only,configuration:,run-only,subjects:,test:,user-id:,skip-terraform"
PARSED="$(parse_arguments "$OPTIONS" "$LONGOPTS" "$0" "$@")"
eval set -- "$PARSED"

while true; do
  case "$1" in
  -b | --bootstrap-only)
    BOOTSTRAP="true"
    RUN="false"
    shift
    ;;
  -r | --run-only)
    BOOTSTRAP="false"
    RUN="true"
    shift
    ;;
  --skip-terraform)
    SKIP_TERRAFORM="true"
    shift
    ;;
  -c | --configuration)
    TEST_CONFIGURATION="$2"
    shift 2
    ;;
  -s | --subject)
    TEST_SUBJECT="$2"
    shift 2
    ;;
  -t | --test)
    TEST_NAME="$2"
    shift 2
    ;;
  -u | --user-id)
    TEST_USER_ID="$2"
    shift 2
    ;;
  --)
    shift
    break
    ;;
  *)
    fail_arg_invalid "Invalid option detected: $1"
    ;;
  esac
done

#
# Requirements
#

if [ -z "$TEST_CONFIGURATION" ]; then
  fail_arg_invalid "Error: you must supply a test configuration via the -c flag:"
fi

if [ -z "$TEST_NAME" ]; then
  fail_arg_invalid "Error: you must supply a test name via the -t flag:"
fi

if [ -z "$TEST_USER_ID" ]; then
  fail_arg_invalid "Error: you must supply a user ID via the -u flag or VECTOR_TEST_USER_ID env var:"
fi

TEST_CASE_DIR="cases/$TEST_NAME"
if [[ ! -d "$TEST_CASE_DIR" ]]; then
  fail_arg_invalid "Test $TEST_NAME does not exist"
fi

#
# Parse flags
#

prepare_ansible_version_vars "$TEST_SUBJECTS"
prepare_test_subjects_array "$TEST_SUBJECTS"

#
# Header
#

print_vector_logo
print_divider
cat <<END
User ID: $TEST_USER_ID
Test name: $TEST_NAME
Test configuration: $TEST_CONFIGURATION
Test subjects: $TEST_SUBJECTS
Test timestamp: $TEST_TIMESTAMP
END
print_divider
print_spacer

prepare_terraform_params true
prepare_ansible_config true
prepare_ansible_extra_args_array true

#
# Execute
#

export TF_IN_AUTOMATION=true
cd "$TEST_CASE_DIR"

#
# Terraform
#

if [ "$BOOTSTRAP" == 'true' ] && [ "$SKIP_TERRAFORM" != 'true' ]; then
  print_section_header "Provisioning test resources"

  cd terraform

  terraform init -input=false \
    -backend-config="bucket=vector-test-case-state" \
    -backend-config="region=us-east-1" \
    -backend-config="encrypt=true" \
    -backend-config="dynamodb_table=TerraformLocks" \
    -backend-config="key=vector-test-case/$TEST_NAME/$TEST_CONFIGURATION/$TEST_USER_ID.tfstate" \
    "${TERRAFORM_INIT_EXTRA_ARGS[@]}"

  terraform apply -input=false -auto-approve \
    -var pub_key="$TEST_SSH_PUBLIC_KEY" \
    -var test_name="$TEST_NAME" \
    -var test_configuration="$TEST_CONFIGURATION" \
    -var user_id="$TEST_USER_ID" \
    -var-file="../configurations/$TEST_CONFIGURATION/terraform.tfvars"

  cd ..
else
  echo "Bootstrap is disabled, skipping terraform bootstrap process"
fi

#
# Ansible
#

cd ansible
TEST_NAMESPACE="tag_TestName_$TEST_NAME:&tag_TestConfiguration_$TEST_CONFIGURATION:&tag_TestUserID_$TEST_USER_ID"
EXTRA_VARS="\
test_name=$TEST_NAME \
test_configuration=$TEST_CONFIGURATION \
test_namespace=$TEST_NAMESPACE \
test_timestamp=$TEST_TIMESTAMP \
user_id=$TEST_USER_ID \
$ANSIBLE_VERSION_VARS"

ANSIBLE_COMMON_ARGS_ARRAY=(
  -u ubuntu
  -i "../../../ansible/ec2.py"
  --extra-vars "@../configurations/$TEST_CONFIGURATION/ansible.yml"
  --extra-vars "$EXTRA_VARS"
)

if [[ -n "$TEST_CUSTOM_VECTOR_DEB_PATH" ]]; then
  ANSIBLE_COMMON_ARGS_ARRAY+=(
    --extra-vars "local_vector_package_path=$TEST_CUSTOM_VECTOR_DEB_PATH"
  )
fi

if [ "$BOOTSTRAP" == 'true' ]; then
  print_section_header "Bootstrapping test resources"

  set -x

  ansible-playbook \
    "${ANSIBLE_COMMON_ARGS_ARRAY[@]}" \
    "${ANSIBLE_EXTRA_ARGS_ARRAY[@]}" \
    bootstrap.yml

  set +x

else
  echo "Bootstrap is disabled, skipping ansible bootstrap process"
fi

run() {
  local RUN_SUBJECT="$1"
  if grep --quiet "role: $RUN_SUBJECT" bootstrap.yml; then
    print_section_header "Testing $RUN_SUBJECT"

    set -x

    ansible-playbook \
      "${ANSIBLE_COMMON_ARGS_ARRAY[@]}" \
      --extra-vars "test_subject=$RUN_SUBJECT" \
      "${ANSIBLE_EXTRA_ARGS_ARRAY[@]}" \
      run.yml

    set +x

  else
    echo "$RUN_SUBJECT is not installed for this test, skipping..."
  fi
}

if [ "$RUN" == 'true' ]; then
  if [ -z "$TEST_SUBJECT" ]; then
    echo "No test subject specified, running them all..."

    for SUBJECT in "${TEST_SUBJECTS_ARRAY[@]}"; do
      run "$SUBJECT"
    done
  else
    echo "Running $TEST_SUBJECT only..."
    run "$TEST_SUBJECT"
  fi
else
  echo "Run is disabled, skipping ansible run process"
fi

cd ..

#
# Footer
#

# Discover new partitions to ensure querying has the latest data.
# EXECUTION_ID=$(athena_execute_query "MSCK REPAIR TABLE vector_tests")

print_divider
cat <<END
Done!

Compare: bin/compare -t $TEST_NAME -c $TEST_CONFIGURATION
Cohort: bin/cohort -t $TEST_NAME -c $TEST_CONFIGURATION -s vector
END
