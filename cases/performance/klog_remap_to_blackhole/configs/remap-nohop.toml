data_dir = "data"

[sources.stdin]
type = "stdin"

[transforms.remap]
type = "remap"
inputs = ["stdin"]
source = """
# json_parser transform equivalent
parsed_json, err = parse_json(.message)
if err != null {
  ., _ = merge(., parsed_json)
}
# regex_parser transform equivalent (double escape character classes because toml)
matches, err = parse_regex(.source, r'^/([\\w]+)/([\\w]+)/([\\w]+)/(?P<pod>[\\w\\-]+)_(?P<namespace>[\\w\\-]+)_(?P<container>[\\w\\-\\.]+)-(\\w+).log$')
if err != null {
  .pod = matches.pod
  .namespace = matches.namespace
  .container = matches.container
}
# add_fields transform equivalent
.origin_id = .namespace + "/" + .pod + "/" + .container
.agent_name = "vector"
.host = "${VECTOR_SELF_NODE_NAME}"
# coercer transform equivalent
ts, err = to_timestamp(.time)
if err != null {
  .timestamp = ts
}
# original remap logic, improved
nested_json, err = parse_json(.log)
if err != null {
  .log = nested_json
  .log_type = "json"
} else {
  .log_type = "text"
}
"""

[transforms.swimlanes]
type = "swimlanes"
inputs = ["remap"]

[transforms.swimlanes.lanes.json]
type = "remap"
source = """
  .log_type == "json"
"""

[transforms.swimlanes.lanes.text]
type = "remap"
source = """
  .log_type == "text"
"""

[transforms.reduce]
type = "reduce"
inputs = ["swimlanes.text"]
group_by = ["origin_id"]
merge_strategies.log = "concat_newline"
starts_when.type = "remap"
starts_when.source = '''match!(.log, r'^\d{4}\D\d{2}\D\d{2}(T|\s)?\d{2}:\d{2}:\d{2}') || match!(.log, r'^\[?\d{2}\S\w{3}\S\d{4}:\d{2}:\d{2}:\d{2} [+]\d{2,}\]') || match!(.log, r'^\w{3}\s\d{2}\s\d{2}:\d{2}:\d{2}.\d{3}') || match!(.log, r'^\[\w+]: \d{4}\D\d{2}\D\d{2}(T|\s)?\d{2}:\d{2}:\d{2}')'''

[sinks.blackhole]
type = "blackhole"
inputs = ["reduce", "swimlanes.text", "swimlanes.json"]